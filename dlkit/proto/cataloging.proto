// This file is auto-generated by ``protobuf_builder.py``
// DO NOT EDIT THIS BY HAND!
syntax = "proto3";

package dlkit.proto.cataloging;

import "dlkit/primordium/id/primitives.proto";
import "dlkit/primordium/locale/primitives.proto";
import "dlkit/primordium/type/primitives.proto";
import "dlkit/proto/hierarchy.proto";

message Catalog {
  dlkit.primordium.locale.primitives.DisplayText description = 1;
  dlkit.primordium.locale.primitives.DisplayText displayName = 2;
  dlkit.primordium.type.primitives.Type genusTypeId = 3;
  dlkit.primordium.id.primitives.Id id = 4;
  repeated dlkit.primordium.type.primitives.Type recordTypeIds = 5;
}

message CatalogQuery {

}

message CatalogQueryInspector {

}

message CatalogForm {

}

message CatalogSearchOrder {

}

message CatalogSearch {

}

message CatalogSearchResults {

}

message CatalogList {
  repeated Catalog catalogs = 1;
}

message CatalogNode {

}

message CatalogNodeList {
  repeated CatalogNode catalog_nodes = 1;
}

message CanLookupCatalogsReply {
  bool can_lookup_catalogs = 1;
}

message CanLookupCatalogsRequest {

}

message UseComparativeCatalogViewReply {

}

message UseComparativeCatalogViewRequest {

}

message UsePlenaryCatalogViewReply {

}

message UsePlenaryCatalogViewRequest {

}

message GetCatalogReply {
  Catalog catalog = 1;
}

message GetCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message GetCatalogsByIdsRequest {
  repeated dlkit.primordium.id.primitives.Id catalog_ids = 1;
}

message GetCatalogsByGenusTypeRequest {
  dlkit.primordium.type.primitives.Type catalog_genus_type = 1;
}

message GetCatalogsByParentGenusTypeRequest {
  dlkit.primordium.type.primitives.Type catalog_genus_type = 1;
}

message GetCatalogsByRecordTypeRequest {
  dlkit.primordium.type.primitives.Type catalog_record_type = 1;
}

message GetCatalogsByProviderRequest {
  dlkit.primordium.id.primitives.Id resource_id = 1;
}

message GetCatalogsRequest {

}

message CanSearchCatalogsReply {
  bool can_search_catalogs = 1;
}

message CanSearchCatalogsRequest {

}

message GetCatalogQueryReply {
  CatalogQuery catalog_query = 1;
}

message GetCatalogQueryRequest {

}

message GetCatalogsByQueryRequest {
  CatalogQuery catalog_query = 1;
}

message CanCreateCatalogsReply {
  bool can_create_catalogs = 1;
}

message CanCreateCatalogsRequest {

}

message CanCreateCatalogWithRecordTypesReply {
  bool can_create_catalog_with_record_types = 1;
}

message CanCreateCatalogWithRecordTypesRequest {
  repeated dlkit.primordium.type.primitives.Type catalog_record_types = 1;
}

message GetCatalogFormForCreateReply {
  CatalogForm catalog_form = 1;
}

message GetCatalogFormForCreateRequest {
  repeated dlkit.primordium.type.primitives.Type catalog_record_types = 1;
}

message CreateCatalogReply {
  Catalog catalog = 1;
}

message CreateCatalogRequest {
  CatalogForm catalog_form = 1;
}

message CanUpdateCatalogsReply {
  bool can_update_catalogs = 1;
}

message CanUpdateCatalogsRequest {

}

message GetCatalogFormForUpdateReply {
  CatalogForm catalog_form = 1;
}

message GetCatalogFormForUpdateRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message UpdateCatalogReply {

}

message UpdateCatalogRequest {
  CatalogForm catalog_form = 1;
}

message CanDeleteCatalogsReply {
  bool can_delete_catalogs = 1;
}

message CanDeleteCatalogsRequest {

}

message DeleteCatalogReply {

}

message DeleteCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message CanManageCatalogAliasesReply {
  bool can_manage_catalog_aliases = 1;
}

message CanManageCatalogAliasesRequest {

}

message AliasCatalogReply {

}

message AliasCatalogRequest {
  dlkit.primordium.id.primitives.Id alias_id = 1;
  dlkit.primordium.id.primitives.Id catalog_id = 2;
}

message GetCatalogHierarchyIdReply {
  dlkit.primordium.id.primitives.Id id = 1;
}

message GetCatalogHierarchyIdRequest {

}

message GetCatalogHierarchyReply {
  dlkit.proto.hierarchy.Hierarchy hierarchy = 1;
}

message GetCatalogHierarchyRequest {

}

message CanAccessCatalogHierarchyReply {
  bool can_access_catalog_hierarchy = 1;
}

message CanAccessCatalogHierarchyRequest {

}

message GetRootCatalogIdsRequest {

}

message GetRootCatalogsRequest {

}

message HasParentCatalogsReply {
  bool has_parent_catalogs = 1;
}

message HasParentCatalogsRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message IsParentOfCatalogReply {
  bool is_parent_of_catalog = 1;
}

message IsParentOfCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
  dlkit.primordium.id.primitives.Id id_ = 2;
}

message GetParentCatalogIdsRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message GetParentCatalogsRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message IsAncestorOfCatalogReply {
  bool is_ancestor_of_catalog = 1;
}

message IsAncestorOfCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
  dlkit.primordium.id.primitives.Id id_ = 2;
}

message HasChildCatalogsReply {
  bool has_child_catalogs = 1;
}

message HasChildCatalogsRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message IsChildOfCatalogReply {
  bool is_child_of_catalog = 1;
}

message IsChildOfCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
  dlkit.primordium.id.primitives.Id id_ = 2;
}

message GetChildCatalogIdsRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message GetChildCatalogsRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message IsDescendantOfCatalogReply {
  bool is_descendant_of_catalog = 1;
}

message IsDescendantOfCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
  dlkit.primordium.id.primitives.Id id_ = 2;
}

message GetCatalogNodeIdsReply {
  dlkit.proto.hierarchy.Node node = 1;
}

message GetCatalogNodeIdsRequest {
  sint32 ancestor_levels = 1;
  dlkit.primordium.id.primitives.Id catalog_id = 2;
  sint32 descendant_levels = 3;
  bool include_siblings = 4;
}

message GetCatalogNodesReply {
  CatalogNode catalog_node = 1;
}

message GetCatalogNodesRequest {
  sint32 ancestor_levels = 1;
  dlkit.primordium.id.primitives.Id catalog_id = 2;
  sint32 descendant_levels = 3;
  bool include_siblings = 4;
}

message CanModifyCatalogHierarchyReply {
  bool can_modify_catalog_hierarchy = 1;
}

message CanModifyCatalogHierarchyRequest {

}

message AddRootCatalogReply {

}

message AddRootCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message RemoveRootCatalogReply {

}

message RemoveRootCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

message AddChildCatalogReply {

}

message AddChildCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
  dlkit.primordium.id.primitives.Id child_id = 2;
}

message RemoveChildCatalogReply {

}

message RemoveChildCatalogRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
  dlkit.primordium.id.primitives.Id child_id = 2;
}

message RemoveChildCatalogsReply {

}

message RemoveChildCatalogsRequest {
  dlkit.primordium.id.primitives.Id catalog_id = 1;
}

service CatalogLookupSession {
  rpc CanLookupCatalogs(CanLookupCatalogsRequest) returns (CanLookupCatalogsReply) {}
  rpc UseComparativeCatalogView(UseComparativeCatalogViewRequest) returns (UseComparativeCatalogViewReply) {}
  rpc UsePlenaryCatalogView(UsePlenaryCatalogViewRequest) returns (UsePlenaryCatalogViewReply) {}
  rpc GetCatalog(GetCatalogRequest) returns (GetCatalogReply) {}
  rpc GetCatalogsByIds(GetCatalogsByIdsRequest) returns (stream Catalog) {}
  rpc GetCatalogsByGenusType(GetCatalogsByGenusTypeRequest) returns (stream Catalog) {}
  rpc GetCatalogsByParentGenusType(GetCatalogsByParentGenusTypeRequest) returns (stream Catalog) {}
  rpc GetCatalogsByRecordType(GetCatalogsByRecordTypeRequest) returns (stream Catalog) {}
  rpc GetCatalogsByProvider(GetCatalogsByProviderRequest) returns (stream Catalog) {}
  rpc GetCatalogs(GetCatalogsRequest) returns (stream Catalog) {}
}

service CatalogQuerySession {
  rpc CanSearchCatalogs(CanSearchCatalogsRequest) returns (CanSearchCatalogsReply) {}
  rpc GetCatalogQuery(GetCatalogQueryRequest) returns (GetCatalogQueryReply) {}
  rpc GetCatalogsByQuery(GetCatalogsByQueryRequest) returns (stream Catalog) {}
}

service CatalogAdminSession {
  rpc CanCreateCatalogs(CanCreateCatalogsRequest) returns (CanCreateCatalogsReply) {}
  rpc CanCreateCatalogWithRecordTypes(CanCreateCatalogWithRecordTypesRequest) returns (CanCreateCatalogWithRecordTypesReply) {}
  rpc GetCatalogFormForCreate(GetCatalogFormForCreateRequest) returns (GetCatalogFormForCreateReply) {}
  rpc CreateCatalog(CreateCatalogRequest) returns (CreateCatalogReply) {}
  rpc CanUpdateCatalogs(CanUpdateCatalogsRequest) returns (CanUpdateCatalogsReply) {}
  rpc GetCatalogFormForUpdate(GetCatalogFormForUpdateRequest) returns (GetCatalogFormForUpdateReply) {}
  rpc UpdateCatalog(UpdateCatalogRequest) returns (UpdateCatalogReply) {}
  rpc CanDeleteCatalogs(CanDeleteCatalogsRequest) returns (CanDeleteCatalogsReply) {}
  rpc DeleteCatalog(DeleteCatalogRequest) returns (DeleteCatalogReply) {}
  rpc CanManageCatalogAliases(CanManageCatalogAliasesRequest) returns (CanManageCatalogAliasesReply) {}
  rpc AliasCatalog(AliasCatalogRequest) returns (AliasCatalogReply) {}
}

service CatalogHierarchySession {
  rpc GetCatalogHierarchyId(GetCatalogHierarchyIdRequest) returns (GetCatalogHierarchyIdReply) {}
  rpc GetCatalogHierarchy(GetCatalogHierarchyRequest) returns (GetCatalogHierarchyReply) {}
  rpc CanAccessCatalogHierarchy(CanAccessCatalogHierarchyRequest) returns (CanAccessCatalogHierarchyReply) {}
  rpc UseComparativeCatalogView(UseComparativeCatalogViewRequest) returns (UseComparativeCatalogViewReply) {}
  rpc UsePlenaryCatalogView(UsePlenaryCatalogViewRequest) returns (UsePlenaryCatalogViewReply) {}
  rpc GetRootCatalogIds(GetRootCatalogIdsRequest) returns (stream dlkit.primordium.id.primitives.Id) {}
  rpc GetRootCatalogs(GetRootCatalogsRequest) returns (stream Catalog) {}
  rpc HasParentCatalogs(HasParentCatalogsRequest) returns (HasParentCatalogsReply) {}
  rpc IsParentOfCatalog(IsParentOfCatalogRequest) returns (IsParentOfCatalogReply) {}
  rpc GetParentCatalogIds(GetParentCatalogIdsRequest) returns (stream dlkit.primordium.id.primitives.Id) {}
  rpc GetParentCatalogs(GetParentCatalogsRequest) returns (stream Catalog) {}
  rpc IsAncestorOfCatalog(IsAncestorOfCatalogRequest) returns (IsAncestorOfCatalogReply) {}
  rpc HasChildCatalogs(HasChildCatalogsRequest) returns (HasChildCatalogsReply) {}
  rpc IsChildOfCatalog(IsChildOfCatalogRequest) returns (IsChildOfCatalogReply) {}
  rpc GetChildCatalogIds(GetChildCatalogIdsRequest) returns (stream dlkit.primordium.id.primitives.Id) {}
  rpc GetChildCatalogs(GetChildCatalogsRequest) returns (stream Catalog) {}
  rpc IsDescendantOfCatalog(IsDescendantOfCatalogRequest) returns (IsDescendantOfCatalogReply) {}
  rpc GetCatalogNodeIds(GetCatalogNodeIdsRequest) returns (GetCatalogNodeIdsReply) {}
  rpc GetCatalogNodes(GetCatalogNodesRequest) returns (GetCatalogNodesReply) {}
}

service CatalogHierarchyDesignSession {
  rpc GetCatalogHierarchyId(GetCatalogHierarchyIdRequest) returns (GetCatalogHierarchyIdReply) {}
  rpc GetCatalogHierarchy(GetCatalogHierarchyRequest) returns (GetCatalogHierarchyReply) {}
  rpc CanModifyCatalogHierarchy(CanModifyCatalogHierarchyRequest) returns (CanModifyCatalogHierarchyReply) {}
  rpc AddRootCatalog(AddRootCatalogRequest) returns (AddRootCatalogReply) {}
  rpc RemoveRootCatalog(RemoveRootCatalogRequest) returns (RemoveRootCatalogReply) {}
  rpc AddChildCatalog(AddChildCatalogRequest) returns (AddChildCatalogReply) {}
  rpc RemoveChildCatalog(RemoveChildCatalogRequest) returns (RemoveChildCatalogReply) {}
  rpc RemoveChildCatalogs(RemoveChildCatalogsRequest) returns (RemoveChildCatalogsReply) {}
}