// This file is auto-generated by ``protobuf_builder.py``
// DO NOT EDIT THIS BY HAND!
syntax = "proto3";

package dlkit.proto.ontology;

import "dlkit/primordium/id/primitives.proto";
import "dlkit/primordium/locale/primitives.proto";
import "dlkit/primordium/type/primitives.proto";
import "dlkit/proto/hierarchy.proto";
import "dlkit/proto/osid.proto";

message Subject {
  dlkit.primordium.locale.primitives.DisplayText description = 1;
  dlkit.primordium.locale.primitives.DisplayText display_name = 2;
  dlkit.primordium.type.primitives.Type genus_type_id = 3;
  dlkit.primordium.id.primitives.Id id = 4;
  dlkit.proto.osid.OsidCatalog ontology = 5;
  repeated dlkit.primordium.type.primitives.Type record_type_ids = 6;
}

message SubjectQuery {

}

message SubjectQueryInspector {

}

message SubjectForm {

}

message SubjectSearchOrder {

}

message SubjectSearch {

}

message SubjectSearchResults {

}

message SubjectList {
  repeated Subject subjects = 1;
}

message SubjectNode {

}

message SubjectNodeList {
  repeated SubjectNode subject_nodes = 1;
}

message Relevancy {
  dlkit.primordium.id.primitives.Id id_ = 1;
  dlkit.primordium.id.primitives.Id mapped = 2;
  dlkit.proto.osid.OsidCatalog ontology = 3;
  dlkit.primordium.id.primitives.Id subject = 4;
}

message RelevancyQuery {

}

message RelevancyQueryInspector {

}

message RelevancyForm {

}

message RelevancySearchOrder {

}

message RelevancySearch {

}

message RelevancySearchResults {

}

message RelevancyList {
  repeated Relevancy relevancys = 1;
}

message Ontology {
  dlkit.primordium.locale.primitives.DisplayText description = 1;
  dlkit.primordium.locale.primitives.DisplayText display_name = 2;
  dlkit.primordium.type.primitives.Type genus_type_id = 3;
  dlkit.primordium.id.primitives.Id id = 4;
  repeated dlkit.primordium.type.primitives.Type record_type_ids = 5;
}

message OntologyQuery {

}

message OntologyQueryInspector {

}

message OntologyForm {

}

message OntologySearchOrder {

}

message OntologySearch {

}

message OntologySearchResults {

}

message OntologyList {
  repeated Ontology ontologies = 1;
}

message OntologyNode {

}

message OntologyNodeList {
  repeated OntologyNode ontology_nodes = 1;
}

message GetSubjectHierarchyIdReply {
  dlkit.primordium.id.primitives.Id id = 1;
}

message GetSubjectHierarchyIdRequest {

}

message GetSubjectHierarchyReply {
  dlkit.proto.hierarchy.Hierarchy hierarchy = 1;
}

message GetSubjectHierarchyRequest {

}

message CanModifySubjectHierarchyReply {
  bool can_modify_subject_hierarchy = 1;
}

message CanModifySubjectHierarchyRequest {

}

message AddRootSubjectReply {

}

message AddRootSubjectRequest {
  dlkit.primordium.id.primitives.Id subject_id = 1;
}

message RemoveRootSubjectReply {

}

message RemoveRootSubjectRequest {
  dlkit.primordium.id.primitives.Id subject_id = 1;
}

message AddChildSubjectReply {

}

message AddChildSubjectRequest {
  dlkit.primordium.id.primitives.Id child_id = 1;
  dlkit.primordium.id.primitives.Id subject_id = 2;
}

message RemoveChildSubjectReply {

}

message RemoveChildSubjectRequest {
  dlkit.primordium.id.primitives.Id child_id = 1;
  dlkit.primordium.id.primitives.Id subject_id = 2;
}

message RemoveChildSubjectsReply {

}

message RemoveChildSubjectsRequest {
  dlkit.primordium.id.primitives.Id subject_id = 1;
}

service SubjectHierarchyDesignSession {
  rpc GetSubjectHierarchyId(GetSubjectHierarchyIdRequest) returns (GetSubjectHierarchyIdReply) {}
  rpc GetSubjectHierarchy(GetSubjectHierarchyRequest) returns (GetSubjectHierarchyReply) {}
  rpc CanModifySubjectHierarchy(CanModifySubjectHierarchyRequest) returns (CanModifySubjectHierarchyReply) {}
  rpc AddRootSubject(AddRootSubjectRequest) returns (AddRootSubjectReply) {}
  rpc RemoveRootSubject(RemoveRootSubjectRequest) returns (RemoveRootSubjectReply) {}
  rpc AddChildSubject(AddChildSubjectRequest) returns (AddChildSubjectReply) {}
  rpc RemoveChildSubject(RemoveChildSubjectRequest) returns (RemoveChildSubjectReply) {}
  rpc RemoveChildSubjects(RemoveChildSubjectsRequest) returns (RemoveChildSubjectsReply) {}
}