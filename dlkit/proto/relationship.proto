// This file is auto-generated by ``protobuf_builder.py``
// DO NOT EDIT THIS BY HAND!
syntax = "proto3";

package dlkit.proto.relationship;

import "dlkit/primordium/id/primitives.proto";
import "dlkit/primordium/locale/primitives.proto";
import "dlkit/primordium/type/primitives.proto";
import "dlkit/proto/hierarchy.proto";
import "dlkit/proto/osid.proto";
import "google/protobuf/timestamp.proto";

message Relationship {
  dlkit.primordium.id.primitives.Id destination = 1;
  dlkit.proto.osid.OsidCatalog family = 2;
  dlkit.primordium.id.primitives.Id source = 3;
}

message RelationshipQuery {

}

message RelationshipQueryInspector {

}

message RelationshipForm {

}

message RelationshipSearchOrder {

}

message RelationshipSearch {

}

message RelationshipSearchResults {

}

message RelationshipList {
  repeated Relationship relationships = 1;
}

message Family {
  dlkit.primordium.locale.primitives.DisplayText description = 1;
  dlkit.primordium.locale.primitives.DisplayText displayName = 2;
  dlkit.primordium.type.primitives.Type genusTypeId = 3;
  dlkit.primordium.id.primitives.Id id = 4;
  repeated dlkit.primordium.type.primitives.Type recordTypeIds = 5;
}

message FamilyQuery {

}

message FamilyQueryInspector {

}

message FamilyForm {

}

message FamilySearchOrder {

}

message FamilySearch {

}

message FamilySearchResults {

}

message FamilyList {
  repeated Family families = 1;
}

message FamilyNode {

}

message FamilyNodeList {
  repeated FamilyNode family_nodes = 1;
}

message GetFamilyIdReply {
  dlkit.primordium.id.primitives.Id id = 1;
}

message GetFamilyIdRequest {

}

message GetFamilyReply {
  Family family = 1;
}

message GetFamilyRequest {

}

message CanLookupRelationshipsReply {
  bool can_lookup_relationships = 1;
}

message CanLookupRelationshipsRequest {

}

message UseComparativeRelationshipViewReply {

}

message UseComparativeRelationshipViewRequest {

}

message UsePlenaryRelationshipViewReply {

}

message UsePlenaryRelationshipViewRequest {

}

message UseFederatedFamilyViewReply {

}

message UseFederatedFamilyViewRequest {

}

message UseIsolatedFamilyViewReply {

}

message UseIsolatedFamilyViewRequest {

}

message UseEffectiveRelationshipViewReply {

}

message UseEffectiveRelationshipViewRequest {

}

message UseAnyEffectiveRelationshipViewReply {

}

message UseAnyEffectiveRelationshipViewRequest {

}

message GetRelationshipReply {
  Relationship relationship = 1;
}

message GetRelationshipRequest {
  dlkit.primordium.id.primitives.Id relationship_id = 1;
}

message GetRelationshipsByIdsRequest {
  repeated dlkit.primordium.id.primitives.Id relationship_ids = 1;
}

message GetRelationshipsByGenusTypeRequest {
  dlkit.primordium.type.primitives.Type relationship_genus_type = 1;
}

message GetRelationshipsByParentGenusTypeRequest {
  dlkit.primordium.type.primitives.Type relationship_genus_type = 1;
}

message GetRelationshipsByRecordTypeRequest {
  dlkit.primordium.type.primitives.Type relationship_record_type = 1;
}

message GetRelationshipsOnDateRequest {
  google.protobuf.Timestamp from_ = 1;
  google.protobuf.Timestamp to = 2;
}

message GetRelationshipsForSourceRequest {
  dlkit.primordium.id.primitives.Id source_id = 1;
}

message GetRelationshipsForSourceOnDateRequest {
  google.protobuf.Timestamp from_ = 1;
  dlkit.primordium.id.primitives.Id source_id = 2;
  google.protobuf.Timestamp to = 3;
}

message GetRelationshipsByGenusTypeForSourceRequest {
  dlkit.primordium.type.primitives.Type relationship_genus_type = 1;
  dlkit.primordium.id.primitives.Id source_id = 2;
}

message GetRelationshipsByGenusTypeForSourceOnDateRequest {
  google.protobuf.Timestamp from_ = 1;
  dlkit.primordium.type.primitives.Type relationship_genus_type = 2;
  dlkit.primordium.id.primitives.Id source_id = 3;
  google.protobuf.Timestamp to = 4;
}

message GetRelationshipsForDestinationRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
}

message GetRelationshipsForDestinationOnDateRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
  google.protobuf.Timestamp from_ = 2;
  google.protobuf.Timestamp to = 3;
}

message GetRelationshipsByGenusTypeForDestinationRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
  dlkit.primordium.type.primitives.Type relationship_genus_type = 2;
}

message GetRelationshipsByGenusTypeForDestinationOnDateRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
  google.protobuf.Timestamp from_ = 2;
  dlkit.primordium.type.primitives.Type relationship_genus_type = 3;
  google.protobuf.Timestamp to = 4;
}

message GetRelationshipsForPeersRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
  dlkit.primordium.id.primitives.Id source_id = 2;
}

message GetRelationshipsForPeersOnDateRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
  google.protobuf.Timestamp from_ = 2;
  dlkit.primordium.id.primitives.Id source_id = 3;
  google.protobuf.Timestamp to = 4;
}

message GetRelationshipsByGenusTypeForPeersRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
  dlkit.primordium.type.primitives.Type relationship_genus_type = 2;
  dlkit.primordium.id.primitives.Id source_id = 3;
}

message GetRelationshipsByGenusTypeForPeersOnDateRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
  google.protobuf.Timestamp from_ = 2;
  dlkit.primordium.type.primitives.Type relationship_genus_type = 3;
  dlkit.primordium.id.primitives.Id source_id = 4;
  google.protobuf.Timestamp to = 5;
}

message GetRelationshipsRequest {

}

message CanSearchRelationshipsReply {
  bool can_search_relationships = 1;
}

message CanSearchRelationshipsRequest {

}

message GetRelationshipQueryReply {
  RelationshipQuery relationship_query = 1;
}

message GetRelationshipQueryRequest {

}

message GetRelationshipsByQueryRequest {
  RelationshipQuery relationship_query = 1;
}

message CanCreateRelationshipsReply {
  bool can_create_relationships = 1;
}

message CanCreateRelationshipsRequest {

}

message CanCreateRelationshipWithRecordTypesReply {
  bool can_create_relationship_with_record_types = 1;
}

message CanCreateRelationshipWithRecordTypesRequest {
  repeated dlkit.primordium.type.primitives.Type relationship_record_types = 1;
}

message GetRelationshipFormForCreateReply {
  RelationshipForm relationship_form = 1;
}

message GetRelationshipFormForCreateRequest {
  dlkit.primordium.id.primitives.Id destination_id = 1;
  repeated dlkit.primordium.type.primitives.Type relationship_record_types = 2;
  dlkit.primordium.id.primitives.Id source_id = 3;
}

message CreateRelationshipReply {
  Relationship relationship = 1;
}

message CreateRelationshipRequest {
  RelationshipForm relationship_form = 1;
}

message CanUpdateRelationshipsReply {
  bool can_update_relationships = 1;
}

message CanUpdateRelationshipsRequest {

}

message GetRelationshipFormForUpdateReply {
  RelationshipForm relationship_form = 1;
}

message GetRelationshipFormForUpdateRequest {
  dlkit.primordium.id.primitives.Id relationship_id = 1;
}

message UpdateRelationshipReply {

}

message UpdateRelationshipRequest {
  RelationshipForm relationship_form = 1;
}

message CanDeleteRelationshipsReply {
  bool can_delete_relationships = 1;
}

message CanDeleteRelationshipsRequest {

}

message DeleteRelationshipReply {

}

message DeleteRelationshipRequest {
  dlkit.primordium.id.primitives.Id relationship_id = 1;
}

message CanManageRelationshipAliasesReply {
  bool can_manage_relationship_aliases = 1;
}

message CanManageRelationshipAliasesRequest {

}

message AliasRelationshipReply {

}

message AliasRelationshipRequest {
  dlkit.primordium.id.primitives.Id alias_id = 1;
  dlkit.primordium.id.primitives.Id relationship_id = 2;
}

message CanLookupFamiliesReply {
  bool can_lookup_families = 1;
}

message CanLookupFamiliesRequest {

}

message UseComparativeFamilyViewReply {

}

message UseComparativeFamilyViewRequest {

}

message UsePlenaryFamilyViewReply {

}

message UsePlenaryFamilyViewRequest {

}

message GetFamiliesByIdsRequest {
  repeated dlkit.primordium.id.primitives.Id family_ids = 1;
}

message GetFamiliesByGenusTypeRequest {
  dlkit.primordium.type.primitives.Type family_genus_type = 1;
}

message GetFamiliesByParentGenusTypeRequest {
  dlkit.primordium.type.primitives.Type family_genus_type = 1;
}

message GetFamiliesByRecordTypeRequest {
  dlkit.primordium.type.primitives.Type family_record_type = 1;
}

message GetFamiliesByProviderRequest {
  dlkit.primordium.id.primitives.Id resource_id = 1;
}

message GetFamiliesRequest {

}

message CanCreateFamiliesReply {
  bool can_create_families = 1;
}

message CanCreateFamiliesRequest {

}

message CanCreateFamilyWithRecordTypesReply {
  bool can_create_family_with_record_types = 1;
}

message CanCreateFamilyWithRecordTypesRequest {
  repeated dlkit.primordium.type.primitives.Type family_record_types = 1;
}

message GetFamilyFormForCreateReply {
  FamilyForm family_form = 1;
}

message GetFamilyFormForCreateRequest {
  repeated dlkit.primordium.type.primitives.Type family_record_types = 1;
}

message CreateFamilyReply {
  Family family = 1;
}

message CreateFamilyRequest {
  FamilyForm family_form = 1;
}

message CanUpdateFamiliesReply {
  bool can_update_families = 1;
}

message CanUpdateFamiliesRequest {

}

message GetFamilyFormForUpdateReply {
  FamilyForm family_form = 1;
}

message GetFamilyFormForUpdateRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message UpdateFamilyReply {

}

message UpdateFamilyRequest {
  FamilyForm family_form = 1;
}

message CanDeleteFamiliesReply {
  bool can_delete_families = 1;
}

message CanDeleteFamiliesRequest {

}

message DeleteFamilyReply {

}

message DeleteFamilyRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message CanManageFamilyAliasesReply {
  bool can_manage_family_aliases = 1;
}

message CanManageFamilyAliasesRequest {

}

message AliasFamilyReply {

}

message AliasFamilyRequest {
  dlkit.primordium.id.primitives.Id alias_id = 1;
  dlkit.primordium.id.primitives.Id family_id = 2;
}

message GetFamilyHierarchyIdReply {
  dlkit.primordium.id.primitives.Id id = 1;
}

message GetFamilyHierarchyIdRequest {

}

message GetFamilyHierarchyReply {
  dlkit.proto.hierarchy.Hierarchy hierarchy = 1;
}

message GetFamilyHierarchyRequest {

}

message CanAccessFamilyHierarchyReply {
  bool can_access_family_hierarchy = 1;
}

message CanAccessFamilyHierarchyRequest {

}

message GetRootFamilyIdsRequest {

}

message GetRootFamiliesRequest {

}

message HasParentFamiliesReply {
  bool has_parent_families = 1;
}

message HasParentFamiliesRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message IsParentOfFamilyReply {
  bool is_parent_of_family = 1;
}

message IsParentOfFamilyRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
  dlkit.primordium.id.primitives.Id id_ = 2;
}

message GetParentFamilyIdsRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message GetParentFamiliesRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message IsAncestorOfFamilyReply {
  bool is_ancestor_of_family = 1;
}

message IsAncestorOfFamilyRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
  dlkit.primordium.id.primitives.Id id_ = 2;
}

message HasChildFamiliesReply {
  bool has_child_families = 1;
}

message HasChildFamiliesRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message IsChildOfFamilyReply {
  bool is_child_of_family = 1;
}

message IsChildOfFamilyRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
  dlkit.primordium.id.primitives.Id id_ = 2;
}

message GetChildFamilyIdsRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message GetChildFamiliesRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message IsDescendantOfFamilyReply {
  bool is_descendant_of_family = 1;
}

message IsDescendantOfFamilyRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
  dlkit.primordium.id.primitives.Id id_ = 2;
}

message GetFamilyNodeIdsReply {
  dlkit.proto.hierarchy.Node node = 1;
}

message GetFamilyNodeIdsRequest {
  sint32 ancestor_levels = 1;
  sint32 descendant_levels = 2;
  dlkit.primordium.id.primitives.Id family_id = 3;
  bool include_siblings = 4;
}

message GetFamilyNodesReply {
  FamilyNode family_node = 1;
}

message GetFamilyNodesRequest {
  sint32 ancestor_levels = 1;
  sint32 descendant_levels = 2;
  dlkit.primordium.id.primitives.Id family_id = 3;
  bool include_siblings = 4;
}

message CanModifyFamilyHierarchyReply {
  bool can_modify_family_hierarchy = 1;
}

message CanModifyFamilyHierarchyRequest {

}

message AddRootFamilyReply {

}

message AddRootFamilyRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message RemoveRootFamilyReply {

}

message RemoveRootFamilyRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

message AddChildFamilyReply {

}

message AddChildFamilyRequest {
  dlkit.primordium.id.primitives.Id child_id = 1;
  dlkit.primordium.id.primitives.Id family_id = 2;
}

message RemoveChildFamilyReply {

}

message RemoveChildFamilyRequest {
  dlkit.primordium.id.primitives.Id child_id = 1;
  dlkit.primordium.id.primitives.Id family_id = 2;
}

message RemoveChildFamiliesReply {

}

message RemoveChildFamiliesRequest {
  dlkit.primordium.id.primitives.Id family_id = 1;
}

service RelationshipLookupSession {
  rpc GetFamilyId(GetFamilyIdRequest) returns (GetFamilyIdReply) {}
  rpc GetFamily(GetFamilyRequest) returns (GetFamilyReply) {}
  rpc CanLookupRelationships(CanLookupRelationshipsRequest) returns (CanLookupRelationshipsReply) {}
  rpc UseComparativeRelationshipView(UseComparativeRelationshipViewRequest) returns (UseComparativeRelationshipViewReply) {}
  rpc UsePlenaryRelationshipView(UsePlenaryRelationshipViewRequest) returns (UsePlenaryRelationshipViewReply) {}
  rpc UseFederatedFamilyView(UseFederatedFamilyViewRequest) returns (UseFederatedFamilyViewReply) {}
  rpc UseIsolatedFamilyView(UseIsolatedFamilyViewRequest) returns (UseIsolatedFamilyViewReply) {}
  rpc UseEffectiveRelationshipView(UseEffectiveRelationshipViewRequest) returns (UseEffectiveRelationshipViewReply) {}
  rpc UseAnyEffectiveRelationshipView(UseAnyEffectiveRelationshipViewRequest) returns (UseAnyEffectiveRelationshipViewReply) {}
  rpc GetRelationship(GetRelationshipRequest) returns (GetRelationshipReply) {}
  rpc GetRelationshipsByIds(GetRelationshipsByIdsRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByGenusType(GetRelationshipsByGenusTypeRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByParentGenusType(GetRelationshipsByParentGenusTypeRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByRecordType(GetRelationshipsByRecordTypeRequest) returns (stream Relationship) {}
  rpc GetRelationshipsOnDate(GetRelationshipsOnDateRequest) returns (stream Relationship) {}
  rpc GetRelationshipsForSource(GetRelationshipsForSourceRequest) returns (stream Relationship) {}
  rpc GetRelationshipsForSourceOnDate(GetRelationshipsForSourceOnDateRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByGenusTypeForSource(GetRelationshipsByGenusTypeForSourceRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByGenusTypeForSourceOnDate(GetRelationshipsByGenusTypeForSourceOnDateRequest) returns (stream Relationship) {}
  rpc GetRelationshipsForDestination(GetRelationshipsForDestinationRequest) returns (stream Relationship) {}
  rpc GetRelationshipsForDestinationOnDate(GetRelationshipsForDestinationOnDateRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByGenusTypeForDestination(GetRelationshipsByGenusTypeForDestinationRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByGenusTypeForDestinationOnDate(GetRelationshipsByGenusTypeForDestinationOnDateRequest) returns (stream Relationship) {}
  rpc GetRelationshipsForPeers(GetRelationshipsForPeersRequest) returns (stream Relationship) {}
  rpc GetRelationshipsForPeersOnDate(GetRelationshipsForPeersOnDateRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByGenusTypeForPeers(GetRelationshipsByGenusTypeForPeersRequest) returns (stream Relationship) {}
  rpc GetRelationshipsByGenusTypeForPeersOnDate(GetRelationshipsByGenusTypeForPeersOnDateRequest) returns (stream Relationship) {}
  rpc GetRelationships(GetRelationshipsRequest) returns (stream Relationship) {}
}

service RelationshipQuerySession {
  rpc GetFamilyId(GetFamilyIdRequest) returns (GetFamilyIdReply) {}
  rpc GetFamily(GetFamilyRequest) returns (GetFamilyReply) {}
  rpc UseFederatedFamilyView(UseFederatedFamilyViewRequest) returns (UseFederatedFamilyViewReply) {}
  rpc UseIsolatedFamilyView(UseIsolatedFamilyViewRequest) returns (UseIsolatedFamilyViewReply) {}
  rpc CanSearchRelationships(CanSearchRelationshipsRequest) returns (CanSearchRelationshipsReply) {}
  rpc GetRelationshipQuery(GetRelationshipQueryRequest) returns (GetRelationshipQueryReply) {}
  rpc GetRelationshipsByQuery(GetRelationshipsByQueryRequest) returns (stream Relationship) {}
}

service RelationshipAdminSession {
  rpc GetFamilyId(GetFamilyIdRequest) returns (GetFamilyIdReply) {}
  rpc GetFamily(GetFamilyRequest) returns (GetFamilyReply) {}
  rpc CanCreateRelationships(CanCreateRelationshipsRequest) returns (CanCreateRelationshipsReply) {}
  rpc CanCreateRelationshipWithRecordTypes(CanCreateRelationshipWithRecordTypesRequest) returns (CanCreateRelationshipWithRecordTypesReply) {}
  rpc GetRelationshipFormForCreate(GetRelationshipFormForCreateRequest) returns (GetRelationshipFormForCreateReply) {}
  rpc CreateRelationship(CreateRelationshipRequest) returns (CreateRelationshipReply) {}
  rpc CanUpdateRelationships(CanUpdateRelationshipsRequest) returns (CanUpdateRelationshipsReply) {}
  rpc GetRelationshipFormForUpdate(GetRelationshipFormForUpdateRequest) returns (GetRelationshipFormForUpdateReply) {}
  rpc UpdateRelationship(UpdateRelationshipRequest) returns (UpdateRelationshipReply) {}
  rpc CanDeleteRelationships(CanDeleteRelationshipsRequest) returns (CanDeleteRelationshipsReply) {}
  rpc DeleteRelationship(DeleteRelationshipRequest) returns (DeleteRelationshipReply) {}
  rpc CanManageRelationshipAliases(CanManageRelationshipAliasesRequest) returns (CanManageRelationshipAliasesReply) {}
  rpc AliasRelationship(AliasRelationshipRequest) returns (AliasRelationshipReply) {}
}

service FamilyLookupSession {
  rpc CanLookupFamilies(CanLookupFamiliesRequest) returns (CanLookupFamiliesReply) {}
  rpc UseComparativeFamilyView(UseComparativeFamilyViewRequest) returns (UseComparativeFamilyViewReply) {}
  rpc UsePlenaryFamilyView(UsePlenaryFamilyViewRequest) returns (UsePlenaryFamilyViewReply) {}
  rpc GetFamily(GetFamilyRequest) returns (GetFamilyReply) {}
  rpc GetFamiliesByIds(GetFamiliesByIdsRequest) returns (stream Family) {}
  rpc GetFamiliesByGenusType(GetFamiliesByGenusTypeRequest) returns (stream Family) {}
  rpc GetFamiliesByParentGenusType(GetFamiliesByParentGenusTypeRequest) returns (stream Family) {}
  rpc GetFamiliesByRecordType(GetFamiliesByRecordTypeRequest) returns (stream Family) {}
  rpc GetFamiliesByProvider(GetFamiliesByProviderRequest) returns (stream Family) {}
  rpc GetFamilies(GetFamiliesRequest) returns (stream Family) {}
}

service FamilyAdminSession {
  rpc CanCreateFamilies(CanCreateFamiliesRequest) returns (CanCreateFamiliesReply) {}
  rpc CanCreateFamilyWithRecordTypes(CanCreateFamilyWithRecordTypesRequest) returns (CanCreateFamilyWithRecordTypesReply) {}
  rpc GetFamilyFormForCreate(GetFamilyFormForCreateRequest) returns (GetFamilyFormForCreateReply) {}
  rpc CreateFamily(CreateFamilyRequest) returns (CreateFamilyReply) {}
  rpc CanUpdateFamilies(CanUpdateFamiliesRequest) returns (CanUpdateFamiliesReply) {}
  rpc GetFamilyFormForUpdate(GetFamilyFormForUpdateRequest) returns (GetFamilyFormForUpdateReply) {}
  rpc UpdateFamily(UpdateFamilyRequest) returns (UpdateFamilyReply) {}
  rpc CanDeleteFamilies(CanDeleteFamiliesRequest) returns (CanDeleteFamiliesReply) {}
  rpc DeleteFamily(DeleteFamilyRequest) returns (DeleteFamilyReply) {}
  rpc CanManageFamilyAliases(CanManageFamilyAliasesRequest) returns (CanManageFamilyAliasesReply) {}
  rpc AliasFamily(AliasFamilyRequest) returns (AliasFamilyReply) {}
}

service FamilyHierarchySession {
  rpc GetFamilyHierarchyId(GetFamilyHierarchyIdRequest) returns (GetFamilyHierarchyIdReply) {}
  rpc GetFamilyHierarchy(GetFamilyHierarchyRequest) returns (GetFamilyHierarchyReply) {}
  rpc CanAccessFamilyHierarchy(CanAccessFamilyHierarchyRequest) returns (CanAccessFamilyHierarchyReply) {}
  rpc UseComparativeFamilyView(UseComparativeFamilyViewRequest) returns (UseComparativeFamilyViewReply) {}
  rpc UsePlenaryFamilyView(UsePlenaryFamilyViewRequest) returns (UsePlenaryFamilyViewReply) {}
  rpc GetRootFamilyIds(GetRootFamilyIdsRequest) returns (stream dlkit.primordium.id.primitives.Id) {}
  rpc GetRootFamilies(GetRootFamiliesRequest) returns (stream Family) {}
  rpc HasParentFamilies(HasParentFamiliesRequest) returns (HasParentFamiliesReply) {}
  rpc IsParentOfFamily(IsParentOfFamilyRequest) returns (IsParentOfFamilyReply) {}
  rpc GetParentFamilyIds(GetParentFamilyIdsRequest) returns (stream dlkit.primordium.id.primitives.Id) {}
  rpc GetParentFamilies(GetParentFamiliesRequest) returns (stream Family) {}
  rpc IsAncestorOfFamily(IsAncestorOfFamilyRequest) returns (IsAncestorOfFamilyReply) {}
  rpc HasChildFamilies(HasChildFamiliesRequest) returns (HasChildFamiliesReply) {}
  rpc IsChildOfFamily(IsChildOfFamilyRequest) returns (IsChildOfFamilyReply) {}
  rpc GetChildFamilyIds(GetChildFamilyIdsRequest) returns (stream dlkit.primordium.id.primitives.Id) {}
  rpc GetChildFamilies(GetChildFamiliesRequest) returns (stream Family) {}
  rpc IsDescendantOfFamily(IsDescendantOfFamilyRequest) returns (IsDescendantOfFamilyReply) {}
  rpc GetFamilyNodeIds(GetFamilyNodeIdsRequest) returns (GetFamilyNodeIdsReply) {}
  rpc GetFamilyNodes(GetFamilyNodesRequest) returns (GetFamilyNodesReply) {}
}

service FamilyHierarchyDesignSession {
  rpc GetFamilyHierarchyId(GetFamilyHierarchyIdRequest) returns (GetFamilyHierarchyIdReply) {}
  rpc GetFamilyHierarchy(GetFamilyHierarchyRequest) returns (GetFamilyHierarchyReply) {}
  rpc CanModifyFamilyHierarchy(CanModifyFamilyHierarchyRequest) returns (CanModifyFamilyHierarchyReply) {}
  rpc AddRootFamily(AddRootFamilyRequest) returns (AddRootFamilyReply) {}
  rpc RemoveRootFamily(RemoveRootFamilyRequest) returns (RemoveRootFamilyReply) {}
  rpc AddChildFamily(AddChildFamilyRequest) returns (AddChildFamilyReply) {}
  rpc RemoveChildFamily(RemoveChildFamilyRequest) returns (RemoveChildFamilyReply) {}
  rpc RemoveChildFamilies(RemoveChildFamiliesRequest) returns (RemoveChildFamiliesReply) {}
}