syntax = "proto3";

package dlkit.proto.locale;



message CalendarInfo {

}

message TimeInfo {

}

message CalendarUnit {

}

message Locale {

}

message LocaleList {
  repeated Locale = 1;
}

service TranslationSession {
  rpc GetSourceLanguageType() returns (Type) {}
  rpc GetSourceScriptType() returns (Type) {}
  rpc GetTargetLanguageType() returns (Type) {}
  rpc GetTargetScriptType() returns (Type) {}
  rpc CanTranslate() returns (boolean) {}
  rpc GetTranslation(string) returns (string) {}
  rpc TranslateString(string, string) returns (string) {}
  rpc TranslateStrings(string[], string[]) returns (string) {}
}

service TranslationAdminSession {
  rpc GetSourceLanguageType() returns (Type) {}
  rpc GetSourceScriptType() returns (Type) {}
  rpc GetTargetLanguageType() returns (Type) {}
  rpc GetTargetScriptType() returns (Type) {}
  rpc CanUpdateTranslation() returns (boolean) {}
  rpc AddTranslation(string, string) returns () {}
  rpc RemoveTranslation(string) returns () {}
}

service NumericFormattingSession {
  rpc GetNumericFormatType() returns (Type) {}
  rpc CanFormatNumbers() returns (boolean) {}
  rpc CardinalToString(sint32) returns (string) {}
  rpc CardinalsToStrings(cardinal[]) returns (string) {}
  rpc StringToCardinal(string) returns (cardinal) {}
  rpc DecimalToString(float) returns (string) {}
  rpc DecimalsToStrings(decimal[]) returns (string) {}
  rpc DecimalToString(string) returns (decimal) {}
  rpc IntegerToString(integer) returns (string) {}
  rpc IntegersToStrings(integer[]) returns (string) {}
  rpc IntegerToString(string) returns (integer) {}
}

service CalendarFormattingSession {
  rpc GetCalendarType() returns (Type) {}
  rpc GetTimeType() returns (Type) {}
  rpc GetDateFormatType() returns (Type) {}
  rpc GetTimeFormatType() returns (Type) {}
  rpc CanDisplayPrimitives() returns (boolean) {}
  rpc DatetimeToString(google.protobuf.Timestamp) returns (string) {}
  rpc DatetimesToStrings(osid.calendaring.DateTimeList) returns (string) {}
  rpc StringToDateTime(string) returns (DateTime) {}
  rpc TimeToString(osid.calendaring.Time) returns (string) {}
  rpc TimesToStrings(osid.calendaring.TimeList) returns (string) {}
  rpc StringToTime(string) returns (Time) {}
  rpc DurationToString(osid.calendaring.Duration) returns (string) {}
  rpc DurationsToStrings(osid.calendaring.DurationList) returns (string) {}
  rpc StringToDuration(string) returns (Duration) {}
}

service CurrencyFormattingSession {
  rpc GetCurrencyType() returns (Type) {}
  rpc GetNumericFormatType() returns (Type) {}
  rpc CanFormatCurrencies() returns (boolean) {}
  rpc CurrencyToString(osid.financials.Currency) returns (string) {}
  rpc CurrenciesToStrings(osid.financials.Currency[]) returns (string) {}
  rpc StringToCurrency(string) returns (Currency) {}
}

service CoordinateFormattingSession {
  rpc GetCoordinateType() returns (Type) {}
  rpc GetCoordinateFormatType() returns (Type) {}
  rpc CanFormatCoordinates() returns (boolean) {}
  rpc CoordinateToString(osid.mapping.Coordinate) returns (string) {}
  rpc CcoordinatesToStrings(osid.mapping.CoordinateList) returns (string) {}
  rpc StringToCoordinate(string) returns (Coordinate) {}
}

service UnitConversionSession {
  rpc CanConvertUnits() returns (boolean) {}
  rpc ConvertUnit(float, dlkit.primordium.type.primitives.Type, dlkit.primordium.type.primitives.Type) returns (decimal) {}
  rpc ConvertUnits(decimal[], dlkit.primordium.type.primitives.Type, dlkit.primordium.type.primitives.Type) returns (decimal) {}
}

service CurrencyConversionSession {
  rpc GetSourceCurrencyType() returns (Type) {}
  rpc GetTargetCurrencyType() returns (Type) {}
  rpc CanConvertCurrency() returns (boolean) {}
  rpc ConvertCurrency(osid.financials.Currency) returns (Currency) {}
  rpc ConvertCurrencies(osid.financials.Currency[]) returns (Currency) {}
}

service CalendarConversionSession {
  rpc GetSourceCalendarType() returns (Type) {}
  rpc GetSourceTimeType() returns (Type) {}
  rpc GetTargetCalendarType() returns (Type) {}
  rpc GetTargetTimeType() returns (Type) {}
  rpc CanConvertCalendars() returns (boolean) {}
  rpc ConvertCalendar(google.protobuf.Timestamp) returns (DateTime) {}
  rpc ConvertCalendars(osid.calendaring.DateTimeList) returns (stream DateTime) {}
}

service CoordinateConversionSession {
  rpc GetSourceCoordinateType() returns (Type) {}
  rpc GetTargetCoordinateType() returns (Type) {}
  rpc CanConvertCoordinates() returns (boolean) {}
  rpc ConvertCoordinate(osid.mapping.Coordinate) returns (Coordinate) {}
  rpc ConvertCoordinates(osid.mapping.CoordinateList) returns (stream Coordinate) {}
}

service SpatialUnitConversionSession {
  rpc GetSourceSpatialUnitRecordType() returns (Type) {}
  rpc GetTargetSpatialUnitRecordType() returns (Type) {}
  rpc CanConvertSpatialUnits() returns (boolean) {}
  rpc ConvertSpatialUnit(osid.mapping.SpatialUnit) returns (SpatialUnit) {}
  rpc ConvertSpatialUnits(osid.mapping.SpatialUnitList) returns (stream SpatialUnit) {}
}

service FormatConversionSession {
  rpc GetSourceFormatType() returns (Type) {}
  rpc GetTargetFormatType() returns (Type) {}
  rpc CanConvertFormats() returns (boolean) {}
  rpc ConvertFormat(string) returns (string) {}
  rpc ConvertFormats(string[]) returns (string) {}
}

service CalendarInfoSession {
  rpc GetCalendarType() returns (Type) {}
  rpc GetTimeType() returns (Type) {}
  rpc CanExamineCalendars() returns (boolean) {}
  rpc GetCalendarInfo() returns (CalendarInfo) {}
  rpc GetTimeInfo() returns (TimeInfo) {}
}