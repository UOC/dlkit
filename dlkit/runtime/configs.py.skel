
try:
    from django.conf import settings
except ImportError:
    from ..dlkit_runtime_project import settings
from .handcar_configs import *
import importlib

from .primordium import Type

AWS_ASSET_CONTENT_RECORD_TYPE = Type(**{
        'authority': 'odl.mit.edu',
        'namespace': 'asset_content_record_type',
        'identifier': 'amazon-web-services'
    })


empty = {
    'id': 'empty_configuration',
    'displayName': 'Empty Configuration',
    'description': 'Empty Configuration with no Parameters',
    'parameters': {}
}

aws_adapter_1 = {
    'id': 'aws_adapter_configuration_1',
    'displayName': 'AWS Adapter Configuration',
    'description': 'Configuration for AWS Adapter',
    'parameters':
        {
        'implKey':
            {
            'syntax': 'STRING',
            'displayName': 'Implementation Key',
            'description': 'Implementation key used by Runtime for class loading',
            'values':
                [
                    {'value': 'aws_adapter', 'priority': 1}
                ]
           },
        'cloudFrontPublicKey':
            {
            'syntax': 'STRING',
            'displayName': 'CloudFront Public Key',
            'description': 'Public key for Amazon CloudFront service.',
            'values':
                [
                    {'value': settings.CLOUDFRONT_PUBLIC_KEY, 'priority': 1}
                ]
           },
        'cloudFrontPrivateKey':
            {
            'syntax': 'STRING',
            'displayName': 'CloudFront Private Key',
            'description': 'Private key for Amazon CloudFront service.',
            'values':
                [
                    {'value': settings.CLOUDFRONT_PRIVATE_KEY, 'priority': 1}
                ]
           },
        'cloudFrontSigningKeypairId':
            {
            'syntax': 'STRING',
            'displayName': 'CloudFront Signing Keypair ID',
            'description': 'Signing keypair id for Amazon CloudFront service.',
            'values':
                [
                    {'value': settings.CLOUDFRONT_SIGNING_KEYPAIR_ID, 'priority': 1}
                ]
           },
        'cloudFrontSigningPrivateKeyFile':
            {
            'syntax': 'STRING',
            'displayName': 'CloudFront Signing Private Key File',
            'description': 'Signing Private Key File for Amazon CloudFront service.',
            'values':
                [
                    {'value': settings.CLOUDFRONT_SIGNING_PRIVATE_KEY_FILE, 'priority': 1}
                ]
           },
        'cloudFrontDistro':
            {
            'syntax': 'STRING',
            'displayName': 'CloudFront Distro',
            'description': 'CloudFront Distr-o-bution.',
            'values':
                [
                    {'value': settings.CLOUDFRONT_DISTRO, 'priority': 1}
                ]
           },
        'cloudFrontDistroId':
            {
            'syntax': 'STRING',
            'displayName': 'CloudFront Distro Id',
            'description': 'CloudFront Distr-o-bution Id.',
            'values':
                [
                    {'value': settings.CLOUDFRONT_DISTRO_ID, 'priority': 1}
                ]
           },
        'S3PrivateKey':
            {
            'syntax': 'STRING',
            'displayName': 'S3 Private Key',
            'description': 'Private Key for Amazon S3.',
            'values':
                [
                    {'value': settings.S3_PRIVATE_KEY, 'priority': 1}
                ]
           },
        'S3PublicKey':
            {
            'syntax': 'STRING',
            'displayName': 'S3 Public Key',
            'description': 'Public Key for Amazon S3.',
            'values':
                [
                    {'value': settings.S3_PUBLIC_KEY, 'priority': 1}
                ]
           },
        'S3Bucket':
            {
            'syntax': 'STRING',
            'displayName': 'S3 Bucket',
            'description': 'Bucket for Amazon S3.',
            'values':
                [
                    {'value': settings.S3_BUCKET, 'priority': 1}
                ]
            },
        }
    }


mongo_1 = {
    'id': 'mongo_configuration_1',
    'displayName': 'Mongo Configuration',
    'description': 'Configuration for Mongo Implementation',
    'parameters':
        {
        'implKey':
            {
            'syntax': 'STRING',
            'displayName': 'Implementation Key',
            'description': 'Implementation key used by Runtime for class loading',
            'values':
                [
                    {'value': 'mongo', 'priority': 1}
                ]
           },
        'mongoDBNamePrefix':
            {
            'syntax': 'STRING',
            'displayName': 'Mongo DB Name Prefix',
            'description': 'Prefix for naming mongo databases.',
            'values':
                [
                    {'value': settings.DLKIT_MONGO_DB_PREFIX, 'priority': 1}
                ]
            },
        'repositoryProviderImpl':
            {
            'syntax': 'STRING',
            'displayName': 'Repository Provider Implementation',
            'description': 'Implementation for repository service provider',
            'values':
                [
                    {'value': 'aws_adapter_1', 'priority': 1}
                ]
            },
        'assetContentRecordTypeForFiles':
            {
            'syntax': 'TYPE',
            'displayName': 'Asset Content Type for Files',
            'description': 'Asset Content Type for Records that store Files in a repository',
            'values':
                [
                    {'value': 'AWS_ASSET_CONTENT_RECORD_TYPE', 'priority': 1}
                ]
            },
        }
    }

ask_me_authz = {
    'id': 'stupid_authz_impl',
    'displayName': 'Stupid Authz Impl Configuration',
    'description': 'Configuration for Stupid Authorization Impl',
    'parameters':
        {
        'implKey':
            {
            'syntax': 'STRING',
            'displayName': 'Implementation Key',
            'description': 'Implementation key used by Runtime for class loading',
            'values':
                [
                    {'value': 'ask_me_authz', 'priority': 1}
                ]
           },
        }
    }

authz_adapter_1 = {
    'id': 'authz_adapter_configuration_1',
    'displayName': 'AuthZ Adapter Configuration',
    'description': 'Configuration for AuthZ Adapter',
    'parameters':
        {
        'implKey':
            {
            'syntax': 'STRING',
            'displayName': 'Implementation Key',
            'description': 'Implementation key used by Runtime for class loading',
            'values':
                [
                    {'value': 'authz_adapter', 'priority': 1}
                ]
           },
        'authzAuthorityImpl':
            {
            'syntax': 'STRING',
            'displayName': 'Repository Provider Implementation',
            'description': 'Implementation for repository service provider',
            'values':
                [
                    {'value': 'ask_me_authz', 'priority': 1}
                ]
           },
        'assessmentProviderImpl':
            {
            'syntax': 'STRING',
            'displayName': 'Assessment Provider Implementation',
            'description': 'Implementation for assessment service provider',
            'values':
                [
                    {'value': 'mongo_1', 'priority': 1}
                ]
            },
        'repositoryProviderImpl':
            {
            'syntax': 'STRING',
            'displayName': 'Repository Provider Implementation',
            'description': 'Implementation for repository service provider',
            'values':
                [
                    {'value': 'aws_adapter_1', 'priority': 1}
                ]
            },
        }
    }


service = {
    'id': 'dlkit_runtime_bootstrap_configuration',
    'displayName': 'DLKit Runtime Bootstrap Configuration',
    'description': 'Bootstrap Configuration for DLKit Runtime',
    'parameters':
        {
        'implKey':
            {
            'syntax': 'STRING',
            'displayName': 'Implementation Key',
            'description': 'Implementation key used by Runtime for class loading',
            'values':
                [
                    {'value': 'service', 'priority': 1}
                ]
           },
        'assessmentProviderImpl':
            {
            'syntax': 'STRING',
            'displayName': 'Assessment Provider Implementation',
            'description': 'Implementation for assessment service provider',
            'values':
                [
                    {'value': 'authz_adapter_1', 'priority': 1}
                ]
            },
        'learningProviderImpl':
            {
            'syntax': 'STRING',
            'displayName': 'Learning Provider Implementation',
            'description': 'Implementation for learning service provider',
            'values':
                [
                    {'value': 'handcar_mc3', 'priority': 1}
                ]
            },
        'repositoryProviderImpl':
            {
            'syntax': 'STRING',
            'displayName': 'Repository Provider Implementation',
            'description': 'Implementation for repository service provider',
            'values':
                [
                    {'value': 'authz_adapter_1', 'priority': 1}
                ]
            },
        }
    }

bootstrap = {
    'id': 'bootstrap_configuration',
    'displayName': 'BootStrap Configuration',
    'description': 'Configuration for Bootstrapping',
    'parameters':
        {
        'implKey':
            {
            'syntax': 'STRING',
            'displayName': 'Implementation Key',
            'description': 'Implementation key used by Runtime for class loading',
            'values':
                [
                    {'value': 'service', 'priority': 1}
                ]
           },
        }
    }

